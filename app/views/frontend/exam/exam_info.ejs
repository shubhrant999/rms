<%- include('header'); -%>
<div id="ques_sec">
    <!-- <section class="section entry-container fixbg-one"> -->
    <section class="section hiring-assesment">

        <% if(viewData.error_msg){ %>
        <header class="home-heading text-center">
            <h1 class="title-lg">Hiring Assessment</h1>

        </header>
        <div class="instructions">
            <h1 class="title-lg"></h1><center>
                <%= viewData.error_msg %>
            </center>
        </div>
        <% }else{ %>
        <div class="container">
            <header class="text-center">
                <h1>hiring Assesment</h1>
                <h3>
                    <%= viewData.role_type %>
                </h3>
            </header>
            <div class="instructions">
                <p><img src="images/loud.png" alt=""> Instructions</p>
                <ul>
                    <li>This assessment needs to be completed in 25 minutes. Read through the question slowly &
                        thoroughly before responding, allotted time is enough for the test</li>
                    <li>Kindly ensure you have selected an answer choice before proceeding to the next question</li>
                    <li>Kindly save & submit the test at the end, this will close your test</li>
                    <li>Make sure you donâ€™t receive calls while attempting the test</li>
                    <li><span><i class="green-dot"></i> Attempted</span> <span><i class="red-dot"></i> Not
                            Attempted</span> <span><i class="yellow-dot"></i> Attempt Later</span></li>
                </ul>
            </div>
            <div class="text-center mt-5 mb-5">
                <button class="btn btn-primary" id="start_hire_exam"
                    data-token="<%= viewData.token; %>">Start Now</button>
            </div>
        </div>

        <% } %>
    </section>
</div>
<% if(!viewData.error_msg){ %>
<script>
    $(document).ready(function () {
        req_type = '<%= viewData.req_type; %>';
        exam_id = '<%= viewData.exam_id; %>';
        var time_remaning = 0;
        var timer_start = 0;
        console.log(req_type);

        if (req_type == 'load') {
            window.onload = start_exam(req_type);
        }       

        function start_exam(type = 'ajax') {
            token = $('#start_hire_exam').attr('data-token');
            page_type = '<%= viewData.exam_page %>';
            
            $.ajax({
                type: "POST",
                url: "ajax/hiring_questions",
                data: { token: token, type: type },             
                success: function (response) {
                    // console.log(response);                   
                    if (response != '') {          
                        $('.start_header').hide();
                        $('.ques_header').show();  
                        $("#ques_sec").html(response);                        
                        var status = $("#responseData").attr('data-status');
                        var time_taking = $("#responseData").attr('data-timeTaking');
                        var time_take_per = $("#responseData").attr('data-timeTakePer'); 
                        time_remaning = response.time_taking;
                        fnstart(time_remaning);
                        startTimer(time_remaning);
                        $("#time_taking").html(time_taking);
                        $("#progress-per").attr('data-percentage', time_take_per);
                        //$("#exam_can_name").text('Welcome ' + response.exam_can_name);
                        //$("#exam_can_name").attr('title', response.exam_can_name);           
                    } else {
                        console.log("Error in question data.");
                    }
                }
            });
        }

        $('#start_hire_exam').click(function () {
            start_exam();
        });


        const TIME_LIMIT = '<%= constants.EXAM_TIME %>';
        time_remaning = 0;
        let timePassed = time_remaning;
        let timeLeft = TIME_LIMIT;
        let timerInterval = null;
        let remainingPathColor = COLOR_CODES.info.color;
        function fnstart(timeremaning = 0) {
            time_remaning = parseInt(timeremaning);
            time_remaning = time_remaning;
            document.getElementById("app").innerHTML = `
                <div class="base-timer">
                    <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                        <g class="base-timer__circle">
                        <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
                        <path
                            id="base-timer-path-remaining"
                            stroke-dasharray="283"
                            class="base-timer__path-remaining ${remainingPathColor}"
                            d="
                            M 50, 50
                            m -45, 0
                            a 45,45 0 1,0 90,0
                            a 45,45 0 1,0 -90,0
                            "
                        ></path>
                        </g>
                    </svg>
                    <span id="base-timer-label" class="base-timer__label">${formatTime(timeLeft)}</span>
                </div>`;
        }


        var ajax_call = function () {
            $.ajax({
                type: 'get',
                url: 'time_hiring_check',
                data: {},
                dataType: 'json',
                success: function (response) {
                    console.log(response);
                    $("#time_taking").text(response.time_taking);
                    $("#progress-per").attr('data-percentage', response.time_take_per);
                    if (response.status == 2) {
                        onTimesUp();
                    }
                }
            });
        };
        
        var interval = 1000 * 10 * 1; // where X is your every X minutes
        setInterval(ajax_call, interval);

        function onTimesUp() {
            clearInterval(timerInterval);
            $.ajax({
                type: 'POST',
                url: 'ajax/hiring_submit',
                data: {},             
                beforeSend: function (xhr) {
                    $(".loader").show();
                    $('#apply_job').attr('disabled', true);
                },
                success: function (response) {
                   $(".loader").hide();
                    if (response.status == 2) {
                        window.location.href = 'thank-you';
                    }
                    else if (response.status == 0) {
                        if ((response.msg) && (response.msg != undefined)) {
                            $('#msg-group').html('<div class="error">' + response.msg + '</small>');
                        }
                    }
                }            
            });
        }

            function startTimer(timeremaning = 0) {
                time_remaning = (TIME_LIMIT - time_remaning);
                console.log(timePassed);
                timerInterval = setInterval(() => {               
                    timePassed = timePassed += 1;
                    timeLeft = TIME_LIMIT - timePassed;           
                    document.getElementById("base-timer-label").innerHTML = formatTime(timeLeft);                    
                    setCircleDasharray();
                    setRemainingPathColor(timeLeft);
                    if ((timeLeft === 0) || (timeLeft < 0)) {
                        onTimesUp();
                    }
                }, 1000);
            }

            function formatTime(time) {
                const minutes = Math.floor(time/60);
                let seconds = time % 60;
                if (seconds < 10) {
                    seconds = '0'+seconds;
                }
                return minutes+':'+seconds;
            }

            function setRemainingPathColor(timeLeft) {
                const { alert, warning, info } = COLOR_CODES;
                if (timeLeft <= alert.threshold) {
                    document
                        .getElementById("base-timer-path-remaining")
                        .classList.remove(warning.color);
                    document
                        .getElementById("base-timer-path-remaining")
                        .classList.add(alert.color);
                } else if (timeLeft <= warning.threshold) {
                    document
                        .getElementById("base-timer-path-remaining")
                        .classList.remove(info.color);
                    document
                        .getElementById("base-timer-path-remaining")
                        .classList.add(warning.color);
                }
            }

            function calculateTimeFraction() {
                const rawTimeFraction = timeLeft / TIME_LIMIT;
                return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
            }

            function setCircleDasharray() {
                const circleDasharray = `${(
                    calculateTimeFraction() * FULL_DASH_ARRAY
                ).toFixed(0)} 283`;
                document
                    .getElementById("base-timer-path-remaining")
                    .setAttribute("stroke-dasharray", circleDasharray);
            }






 

});


</script>
<% } %>



<%- include('footer'); -%>










